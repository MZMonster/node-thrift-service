//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Base = module.exports.Base = function(args) {
  this.msgID = null;
  this.sender = null;
  if (args) {
    if (args.msgID !== undefined && args.msgID !== null) {
      this.msgID = args.msgID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field msgID is unset!');
    }
    if (args.sender !== undefined && args.sender !== null) {
      this.sender = args.sender;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sender is unset!');
    }
  }
};
Base.prototype = {};
Base.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msgID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sender = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Base.prototype.write = function(output) {
  output.writeStructBegin('Base');
  if (this.msgID !== null && this.msgID !== undefined) {
    output.writeFieldBegin('msgID', Thrift.Type.STRING, 1);
    output.writeString(this.msgID);
    output.writeFieldEnd();
  }
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.STRING, 2);
    output.writeString(this.sender);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Call = module.exports.Call = function(args) {
  this.name = null;
  this.method = null;
  this.params = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field method is unset!');
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = args.params;
    }
  }
};
Call.prototype = {};
Call.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Call.prototype.write = function(output) {
  output.writeStructBegin('Call');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 2);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 3);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CMsg = module.exports.CMsg = function(args) {
  this.base = null;
  this.call = null;
  if (args) {
    if (args.base !== undefined && args.base !== null) {
      this.base = new ttypes.Base(args.base);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field base is unset!');
    }
    if (args.call !== undefined && args.call !== null) {
      this.call = new ttypes.Call(args.call);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field call is unset!');
    }
  }
};
CMsg.prototype = {};
CMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.base = new ttypes.Base();
        this.base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.call = new ttypes.Call();
        this.call.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMsg.prototype.write = function(output) {
  output.writeStructBegin('CMsg');
  if (this.base !== null && this.base !== undefined) {
    output.writeFieldBegin('base', Thrift.Type.STRUCT, 1);
    this.base.write(output);
    output.writeFieldEnd();
  }
  if (this.call !== null && this.call !== undefined) {
    output.writeFieldBegin('call', Thrift.Type.STRUCT, 2);
    this.call.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Res = module.exports.Res = function(args) {
  this.err = null;
  this.result = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field err is unset!');
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field result is unset!');
    }
  }
};
Res.prototype = {};
Res.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.err = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Res.prototype.write = function(output) {
  output.writeStructBegin('Res');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRING, 1);
    output.writeString(this.err);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 2);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RMsg = module.exports.RMsg = function(args) {
  this.base = null;
  this.res = null;
  if (args) {
    if (args.base !== undefined && args.base !== null) {
      this.base = new ttypes.Base(args.base);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field base is unset!');
    }
    if (args.res !== undefined && args.res !== null) {
      this.res = new ttypes.Res(args.res);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field res is unset!');
    }
  }
};
RMsg.prototype = {};
RMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.base = new ttypes.Base();
        this.base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.res = new ttypes.Res();
        this.res.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RMsg.prototype.write = function(output) {
  output.writeStructBegin('RMsg');
  if (this.base !== null && this.base !== undefined) {
    output.writeFieldBegin('base', Thrift.Type.STRUCT, 1);
    this.base.write(output);
    output.writeFieldEnd();
  }
  if (this.res !== null && this.res !== undefined) {
    output.writeFieldBegin('res', Thrift.Type.STRUCT, 2);
    this.res.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UncaughtException = module.exports.UncaughtException = function(args) {
  Thrift.TException.call(this, "UncaughtException")
  this.name = "UncaughtException"
  this.err = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field err is unset!');
    }
  }
};
Thrift.inherits(UncaughtException, Thrift.TException);
UncaughtException.prototype.name = 'UncaughtException';
UncaughtException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.err = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UncaughtException.prototype.write = function(output) {
  output.writeStructBegin('UncaughtException');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRING, 1);
    output.writeString(this.err);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

